
syntax = "proto3";
package gamePacket;

/* 실패 코드 */
enum GlobalFailCode {
  NONE = 0;                      // 오류 없음
  UNKNOWN_ERROR = 1;             // 알 수 없는 오류
  INVALID_REQUEST = 2;           // 잘못된 요청
  AUTHENTICATION_FAILED = 3;     // 인증 실패
}

/* 게임 데이터 명세 */
message Position 
{
  float x = 1;                   // x 좌표
  float y = 2;                   // y 좌표
}

message BaseData {
  int32 hp = 1;                  // 현재 체력
  int32 maxHp = 2;              // 최대 체력
}

message TowerData {
  int32 towerId = 1;            // 타워 고유 ID
  float x = 2;                  // 타워 x 좌표
  float y = 3;                  // 타워 y 좌표
}

message MonsterData {
  int32 monsterId = 1;          // 몬스터 고유 ID
  int32 monsterNumber = 2;      // 몬스터 번호
  int32 level = 3;              // 몬스터 레벨
}

message InitialGameState {
  int32 baseHp = 1;             // 초기 기지 체력
  int32 towerCost = 2;          // 타워 건설 비용
  int32 initialGold = 3;        // 초기 골드
  int32 monsterSpawnInterval = 4; // 몬스터 생성 간격
}

message GameState {
  int32 gold = 1;               // 보유 골드
  BaseData base = 2;            // 기지 정보
  int32 highScore = 3;          // 최고 점수
  repeated TowerData towers = 4; // 타워 목록
  repeated MonsterData monsters = 5; // 몬스터 목록
  int32 monsterLevel = 6;       // 현재 몬스터 레벨
  int32 score = 7;              // 현재 점수
  repeated Position monsterPath = 8; // 몬스터 이동 경로
  Position basePosition = 9;     // 기지 위치
}

/* 패킷 명세 */
message C2SRegisterRequest {     // 클라이언트->서버 회원가입 요청
  string id = 1;                // 사용자 ID
  string password = 2;          // 비밀번호
  string email = 3;             // 이메일
}

message S2CRegisterResponse {    // 서버->클라이언트 회원가입 응답
  bool success = 1;             // 성공 여부
  string message = 2;           // 응답 메시지
  GlobalFailCode failCode = 3;  // 실패 코드
}

message C2SLoginRequest {        // 클라이언트->서버 로그인 요청
  string id = 1;                // 사용자 ID
  string password = 2;          // 비밀번호
}

message S2CLoginResponse {       // 서버->클라이언트 로그인 응답
  bool success = 1;             // 성공 여부
  string message = 2;           // 응답 메시지
  string token = 3;             // 인증 토큰
  GlobalFailCode failCode = 4;  // 실패 코드
}

message C2SMatchRequest {        // 클라이언트->서버 매칭 요청
}

message S2CMatchStartNotification { // 서버->클라이언트 매칭 완료 알림
  InitialGameState initialGameState = 1; // 초기 게임 상태
  GameState playerData = 2;      // 플레이어 데이터
  GameState opponentData = 3;    // 상대방 데이터
}

message S2CStateSyncNotification { // 서버->클라이언트 상태 동기화 알림
  int32 userGold = 1;           // 사용자 골드
  int32 baseHp = 2;             // 기지 체력
  int32 monsterLevel = 3;       // 몬스터 레벨
  int32 score = 4;              // 점수
  repeated TowerData towers = 5; // 타워 목록
  repeated MonsterData monsters = 6; // 몬스터 목록
}

message C2STowerPurchaseRequest { // 클라이언트->서버 타워 구매 요청
  float x = 1;                   // 설치 x 좌표
  float y = 2;                   // 설치 y 좌표
}

message S2CTowerPurchaseResponse { // 서버->클라이언트 타워 구매 응답
  int32 towerId = 1;              // 생성된 타워 ID
}

message S2CAddEnemyTowerNotification { // 서버->클라이언트 적 타워 추가 알림
  int32 towerId = 1;                  // 타워 ID
  float x = 2;                        // x 좌표
  float y = 3;                        // y 좌표
}

message C2SSpawnMonsterRequest {      // 클라이언트->서버 몬스터 생성 요청
}

message S2CSpawnMonsterResponse {     // 서버->클라이언트 몬스터 생성 응답
  int32 monsterId = 1;               // 생성된 몬스터 ID
  int32 monsterNumber = 2;           // 몬스터 번호
}

message S2CSpawnEnemyMonsterNotification { // 서버->클라이언트 적 몬스터 생성 알림
  int32 monsterId = 1;                    // 몬스터 ID
  int32 monsterNumber = 2;                // 몬스터 번호
}

message C2STowerAttackRequest {       // 클라이언트->서버 타워 공격 요청
  int32 towerId = 1;                 // 공격하는 타워 ID
  int32 monsterId = 2;               // 공격 대상 몬스터 ID
}

message S2CEnemyTowerAttackNotification { // 서버->클라이언트 적 타워 공격 알림
  int32 towerId = 1;                     // 공격하는 타워 ID
  int32 monsterId = 2;                   // 공격 대상 몬스터 ID
}

message C2SMonsterAttackBaseRequest {  // 클라이언트->서버 몬스터의 기지 공격 요청
  int32 damage = 1;                    // 공격 데미지
}

message S2CUpdateBaseHPNotification {  // 서버->클라이언트 기지 체력 업데이트 알림
  bool isOpponent = 1;                // 상대방 기지 여부
  int32 baseHp = 2;                   // 갱신된 기지 체력
}

message S2CGameOverNotification {      // 서버->클라이언트 게임 종료 알림
  bool isWin = 1;                     // 승리 여부
}

message C2SGameEndRequest {            // 클라이언트->서버 게임 종료 요청
}

message C2SMonsterDeathNotification {  // 클라이언트->서버 몬스터 사망 알림
  int32 monsterId = 1;                // 사망한 몬스터 ID
}

message S2CEnemyMonsterDeathNotification { // 서버->클라이언트 적 몬스터 사망 알림
  int32 monsterId = 1;                    // 사망한 몬스터 ID
}

message GamePacket {                   // 게임 패킷 래퍼
  oneof payload {                      // 패킷 페이로드
    C2SRegisterRequest registerRequest = 1;
    S2CRegisterResponse registerResponse = 2;
    C2SLoginRequest loginRequest = 3;
    S2CLoginResponse loginResponse = 4;
    C2SMatchRequest matchRequest = 5;
    S2CMatchStartNotification matchStartNotification = 6;
    S2CStateSyncNotification stateSyncNotification = 7;
    C2STowerPurchaseRequest towerPurchaseRequest = 8;
    S2CTowerPurchaseResponse towerPurchaseResponse = 9;
    S2CAddEnemyTowerNotification addEnemyTowerNotification = 10;
    C2SSpawnMonsterRequest spawnMonsterRequest = 11;
    S2CSpawnMonsterResponse spawnMonsterResponse = 12;
    S2CSpawnEnemyMonsterNotification spawnEnemyMonsterNotification = 13;
    C2STowerAttackRequest towerAttackRequest = 14;
    S2CEnemyTowerAttackNotification enemyTowerAttackNotification = 15;
    C2SMonsterAttackBaseRequest monsterAttackBaseRequest = 16;
    S2CUpdateBaseHPNotification updateBaseHpNotification = 17;
    S2CGameOverNotification gameOverNotification = 18;
    C2SGameEndRequest gameEndRequest = 19;
    C2SMonsterDeathNotification monsterDeathNotification = 20;
    S2CEnemyMonsterDeathNotification enemyMonsterDeathNotification = 21;
  }
}
