
syntax = "proto3";

/* 실패 코드 */
enum GlobalFailCode {
  NONE = 0;
  UNKNOWN_ERROR = 1;
  INVALID_REQUEST = 2;
  AUTHENTICATION_FAILED = 3;
}

/* 게임 데이터 명세 */
message Position {
  float x = 1;
  float y = 2;
}

message BaseData {
  int32 hp = 1;
  int32 maxHp = 2;
}

message TowerData {
  int32 towerId = 1;
  float x = 2;
  float y = 3;
}

message MonsterData {
  int32 monsterId = 1;
  int32 monsterNumber = 2;
  int32 level = 3;
}

message InitialGameState {
  int32 baseHp = 1;
  int32 towerCost = 2;
  int32 initialGold = 3;
  int32 monsterSpawnInterval = 4;
}

message GameState {
  int32 gold = 1;
  BaseData base = 2;
  int32 highScore = 3;
  repeated TowerData towers = 4;
  repeated MonsterData monsters = 5;
  int32 monsterLevel = 6;
  int32 score = 7;
  repeated Position monsterPath = 8;
  Position basePosition = 9;
}

/* 패킷 명세 */

message C2SMatchRequest {
}

message S2CMatchStartNotification {
  InitialGameState initialGameState = 1;
  GameState playerData = 2;
  GameState opponentData = 3;
}

message S2CStateSyncNotification {
  int32 userGold = 1;
  int32 baseHp = 2;
  int32 monsterLevel = 3;
  int32 score = 4;
  repeated TowerData towers = 5;
  repeated MonsterData monsters = 6;
}

message C2STowerPurchaseRequest {
  float x = 1;
  float y = 2;
}

message S2CTowerPurchaseResponse {
  int32 towerId = 1;
}

message S2CAddEnemyTowerNotification {
  int32 towerId = 1;
  float x = 2;
  float y = 3;
}

message C2SSpawnMonsterRequest {
}

message S2CSpawnMonsterResponse {
  int32 monsterId = 1; 
  int32 monsterNumber = 2;
}

message S2CSpawnEnemyMonsterNotification {
  int32 monsterId = 1;
  int32 monsterNumber = 2;
}

message C2STowerAttackRequest {
  int32 towerId = 1;
  int32 monsterId = 2;
}

message S2CEnemyTowerAttackNotification {
  int32 towerId = 1;
  int32 monsterId = 2;
}

message C2SMonsterAttackBaseRequest {
  int32 damage = 1;
}

message S2CUpdateBaseHPNotification {
  bool isOpponent = 1;
  int32 baseHp = 2;
}

message S2CGameOverNotification {
  bool isWin = 1;
}

message C2SGameEndRequest {
}

message C2SMonsterDeathNotification {
  int32 monsterId = 1;
}

message S2CEnemyMonsterDeathNotification {
  int32 monsterId = 1;
}

message GamePacket {
  oneof payload {
    C2SRegisterRequest registerRequest = 1;
    S2CRegisterResponse registerResponse = 2;
    C2SLoginRequest loginRequest = 3;
    S2CLoginResponse loginResponse = 4;
    C2SMatchRequest matchRequest = 5;
    S2CMatchStartNotification matchStartNotification = 6;
    S2CStateSyncNotification stateSyncNotification = 7;
    C2STowerPurchaseRequest towerPurchaseRequest = 8;
    S2CTowerPurchaseResponse towerPurchaseResponse = 9;
    S2CAddEnemyTowerNotification addEnemyTowerNotification = 10;
    C2SSpawnMonsterRequest spawnMonsterRequest = 11;
    S2CSpawnMonsterResponse spawnMonsterResponse = 12;
    S2CSpawnEnemyMonsterNotification spawnEnemyMonsterNotification = 13;
    C2STowerAttackRequest towerAttackRequest = 14;
    S2CEnemyTowerAttackNotification enemyTowerAttackNotification = 15;
    C2SMonsterAttackBaseRequest monsterAttackBaseRequest = 16;
    S2CUpdateBaseHPNotification updateBaseHpNotification = 17;
    S2CGameOverNotification gameOverNotification = 18;
    C2SGameEndRequest gameEndRequest = 19;
    C2SMonsterDeathNotification monsterDeathNotification = 20;
    S2CEnemyMonsterDeathNotification enemyMonsterDeathNotification = 21;
  }
}
